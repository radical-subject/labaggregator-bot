import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler, CallbackQueryHandler)

from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.service.decorators import log_errors
from modules.db import dbmodel, dbschema
from decimal import *

from modules.db.dbmodel import get_timerdata_object

logger = logging.getLogger(__name__)


class EditEntriesDialog(Handlers):
    def __init__(self, bot, db_instances):
        super().__init__(db_instances)
        self.bot=bot
        self.collection = "timer_data_collection"
    
    @log_errors
    def edit_entries_entrypoint(self, update: Update, context: CallbackContext):
        '''
        launches dialog for editing timer entries:
        timestamp editing, 
        '''
        user_id = update.message.from_user.id
        query = {"user_id": user_id}

        result = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, query, user_id)
        '''
        –¥–æ—Å—Ç–∞–µ–º –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏ —Ç–∞–π–º–µ—Ä–∞:
        '''
        try:
            timer_data = result.timerdata
        except:
            timer_data = []
        # –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫
        entry_list=[i['timestamp'] + " -- " + i['comment'] + " -- " + i['timerdata_entry_id'] for i in timer_data]
        '''
        —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –∏–∑ –Ω–∏—Ö –º–µ–Ω—é—à–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        '''
        menu = self.build_menu(entry_list)

        msg_text = '{:^50}'.format('<b>‚úèÔ∏è EDIT ENTRIES:</b>')
        msg_text += '\n'
        msg_text += '{:=^50}'.format('=')
        msg_text += '\n'
        msg_text += '<i>Select entry from below:</i>'
        reply_markup = InlineKeyboardMarkup(menu)

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É
        '''
        update.message.reply_text(text=msg_text, reply_markup=reply_markup, parse_mode='HTML')

        return 1

    @log_errors
    def build_menu(self, entry_list: list):
        """
        –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ–Ω—é—à–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        markup = []
        if entry_list:
            for item in entry_list:
                timestamp = item.split(" -- ")[0]
                comment = item.split(" -- ")[1]
                button_text = " -- ".join([timestamp, comment])
                timerdata_entry_id = item.split(" -- ")[-1]
                markup.append(
                    [InlineKeyboardButton(f'  üóí    {button_text}', callback_data=f'ENTRY_NAME:{timerdata_entry_id}', )]
                    )

        markup.append([InlineKeyboardButton(" ‚ùå    CANCEL AND EXIT", callback_data=f'ENTRY_SELECTION:CANCEL')])
        return markup


    @log_errors
    def select_action(self, update: Update, context: CallbackContext):
        """
        –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞ –≤—ã–±–æ—Ä. 
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat_id

        context.chat_data["user_id"] = user_id
        context.chat_data["chat_id"] = chat_id

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        
        # –¥–æ—Å—Ç–∞–µ–º timestamp –∏–∑ –∫–æ–ª–ª–±–µ–∫–∞ –æ—Ç–¥–∞–≤–∞–µ–º–æ–≥–æ –∫–Ω–æ–ø–∫–æ–π
        timerdata_entry_id = query.data.split(":")[1]
        # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á–∞—Ç–∞ - –æ–Ω–∞ –Ω–∞–º –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–∞–ª–µ–µ
        context.chat_data["timerdata_entry_id"] = timerdata_entry_id

        # –¥–æ—Å—Ç–∞–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–∞–π–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º projection query
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                "user_id" : user_id, 
                'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } }
            },
            { 'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } } }
        )
        logger.info(result)

        str_line = ''
        for i in (list(item.items()) for item in result[0]['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entry = str_line.rstrip("\n")

        if result:

            button_list = [
                [InlineKeyboardButton(" üìÖ   EDIT TIMESTAMP", callback_data=str('SELECT_ACTION:TIMESTAMP'))],
                [InlineKeyboardButton(" üïî   EDIT TIME ELAPSED", callback_data=str('SELECT_ACTION:TIME'))],
                [InlineKeyboardButton(" üí¨   EDIT COMMENT", callback_data=str('SELECT_ACTION:COMMENT'))],
                [InlineKeyboardButton(" üóÇ   EDIT CATEGORY", callback_data=str('SELECT_ACTION:CATEGORY'))],
                [InlineKeyboardButton(" ‚ùå   EXIT", callback_data=f'SELECT_ACTION:CANCEL')]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'{entry}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )
        

        return 2

    @log_errors
    def edit_timestamp(self, update: Update, context: CallbackContext):
        """
        todo HORS –∞–Ω–∞–ª–∏–∑ –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        context.chat_data['sent_message'] = sent_message
       
        reply_markup = InlineKeyboardMarkup([])

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        '''
        self.bot.edit_message_text(
            text=f'–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏.\n–õ–∏–±–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *YYYYMMDDHHMMSS*\n–õ–∏–±–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å –∫–∞–∫–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–º–µ–ª–∞—Å—å –≤ –≤–∏–¥—É:',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return 6

    @log_errors
    def edit_time(self, update: Update, context: CallbackContext):
        """
        –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö - —á–∏—Å–ª–æ –ª–∏? 
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        context.chat_data['sent_message'] = sent_message
       
        reply_markup = InlineKeyboardMarkup([])

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        '''
        self.bot.edit_message_text(
            text=f'–ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–∏—Å–ª–æ–º):',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return 5

    @log_errors
    def edit_timestamp2(self, update: Update, context: CallbackContext):
        """
        —Ñ—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º–µ—Ä–∞
        """
        user_info = update.message.from_user
        user_id = user_info.id
        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = context.chat_data['sent_message']
        timerdata_entry_id = context.chat_data["timerdata_entry_id"]

        mongo_query = {"user_id": user_id}
        result = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        
        # –¥–æ—Å—Ç–∞–µ–º timestamp –∏–∑ c–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞
        user_input = update.message.text
        # logger.info(user_input)
        result.edit_timestamp(timerdata_entry_id, user_input)
        data = result.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)


        '''
        –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Ü–µ–ª—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ select_action
        '''

        # –¥–æ—Å—Ç–∞–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–∞–π–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º projection query
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                "user_id" : user_id, 
                'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } }
            },
            { 'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } } }
        )
        # logger.info(result[0]['timerdata'])

        str_line = ''
        for i in (list(item.items()) for item in result[0]['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entry = str_line.rstrip("\n")

        if result:

            button_list = [
                [InlineKeyboardButton(" üìÖ   EDIT TIMESTAMP", callback_data=str('SELECT_ACTION:TIMESTAMP'))],
                [InlineKeyboardButton(" üïî   EDIT TIME ELAPSED", callback_data=str('SELECT_ACTION:TIME'))],
                [InlineKeyboardButton(" üí¨   EDIT COMMENT", callback_data=str('SELECT_ACTION:COMMENT'))],
                [InlineKeyboardButton(" üóÇ   EDIT CATEGORY", callback_data=str('SELECT_ACTION:CATEGORY'))],
                [InlineKeyboardButton(" ‚ùå   EXIT", callback_data=f'SELECT_ACTION:CANCEL')]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'{entry}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )

        return 2



    @log_errors
    def edit_time2(self, update: Update, context: CallbackContext):
        """
        —Ñ—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º–µ—Ä–∞
        """
        user_info = update.message.from_user
        chat_id = update.message.chat.id
        user_id = user_info.id
        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = context.chat_data['sent_message']
        timerdata_entry_id = context.chat_data["timerdata_entry_id"]

        mongo_query = {"user_id": user_id}
        result = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        
        # –¥–æ—Å—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏–∑ c–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞
        user_input = update.message.text
        # logger.info(user_input)
        result.edit_elapsed_time(timerdata_entry_id, user_input)
        data = result.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)



        '''
        –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Ü–µ–ª—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ select_action
        '''

        # –¥–æ—Å—Ç–∞–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–∞–π–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º projection query
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                "user_id" : user_id, 
                'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } }
            },
            { 'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } } }
        )
        # logger.info(result[0]['timerdata'])

        str_line = ''
        for i in (list(item.items()) for item in result[0]['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entry = str_line.rstrip("\n")

        if result:

            button_list = [
                [InlineKeyboardButton(" üìÖ   EDIT TIMESTAMP", callback_data=str('SELECT_ACTION:TIMESTAMP'))],
                [InlineKeyboardButton(" üïî   EDIT TIME ELAPSED", callback_data=str('SELECT_ACTION:TIME'))],
                [InlineKeyboardButton(" üí¨   EDIT COMMENT", callback_data=str('SELECT_ACTION:COMMENT'))],
                [InlineKeyboardButton(" üóÇ   EDIT CATEGORY", callback_data=str('SELECT_ACTION:CATEGORY'))],
                [InlineKeyboardButton(" ‚ùå   EXIT", callback_data=f'SELECT_ACTION:CANCEL')]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'{entry}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )

        return 2



    @log_errors
    def edit_comment(self, update: Update, context: CallbackContext):
        """
        –≤—Ö–æ–¥ –≤ –≤–µ—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º–µ—Ä–∞
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        context.chat_data['sent_message'] = sent_message
        user_id = update.callback_query.from_user.id
        # result = dbmodel.get_records(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, {"user_id": user_id})
       
        reply_markup = InlineKeyboardMarkup([])

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        '''
        self.bot.edit_message_text(
            text=f'–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏:',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return 4

    @log_errors
    def edit_comment2(self, update: Update, context: CallbackContext):
        """
        —Ñ—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º–µ—Ä–∞
        """
        user_info = update.message.from_user
        chat_id = update.message.chat.id
        user_id = user_info.id
        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = context.chat_data['sent_message']

        mongo_query = {"user_id": user_id}
        result = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        
        # –¥–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ c–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞
        new_comment = update.message.text
        timerdata_entry_id = context.chat_data["timerdata_entry_id"]
        # –ù–∞–∫–æ–Ω–µ—Ü –∑–∞–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        result.edit_comment(timerdata_entry_id, new_comment)

        data = result.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)

        '''
        –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Ü–µ–ª—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ select_action
        '''

        # –¥–æ—Å—Ç–∞–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–∞–π–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º projection query
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                "user_id" : user_id, 
                'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } }
            },
            { 'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } } }
        )
        # logger.info(result[0]['timerdata'])

        str_line = ''
        for i in (list(item.items()) for item in result[0]['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entry = str_line.rstrip("\n")

        if result:

            button_list = [
                [InlineKeyboardButton(" üìÖ   EDIT TIMESTAMP", callback_data=str('SELECT_ACTION:TIMESTAMP'))],
                [InlineKeyboardButton(" üïî   EDIT TIME ELAPSED", callback_data=str('SELECT_ACTION:TIME'))],
                [InlineKeyboardButton(" üí¨   EDIT COMMENT", callback_data=str('SELECT_ACTION:COMMENT'))],
                [InlineKeyboardButton(" üóÇ   EDIT CATEGORY", callback_data=str('SELECT_ACTION:CATEGORY'))],
                [InlineKeyboardButton(" ‚ùå   EXIT", callback_data=f'SELECT_ACTION:CANCEL')]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'{entry}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )

        return 2


    @log_errors
    def edit_category(self, update: Update, context: CallbackContext):
        """
        –≤—Ö–æ–¥ –≤ –≤–µ—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º–µ—Ä–∞
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message

        user_id = update.callback_query.from_user.id
        result = dbmodel.get_records(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, {"user_id": user_id})
        
        '''
        —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
        '''
        try:
            categories_list = result[0]['categories']
        except:
            categories_list = None

        '''
        —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –∏–∑ –Ω–∏—Ö –º–µ–Ω—é—à–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        '''
        menu = self.build_categories_menu(categories_list)

        msg_text = '{:^50}'.format('<b>üõ†   –í–´–ë–ï–†–ò –ù–û–í–£–Æ –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –≠–¢–û–ô –ó–ê–ü–ò–°–ò:</b>')
        msg_text += '\n'
        msg_text += '{:=^50}'.format('=')
        msg_text += '\n'
        msg_text += '<i>Select entry from below:</i>'
        reply_markup = InlineKeyboardMarkup(menu)

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É
        '''
        self.bot.edit_message_text(
            text=f'–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏:',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return 3

    @log_errors
    def build_categories_menu(self, categories_list: list):
        """
        –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ–Ω—é—à–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        markup = []
        if categories_list:
            for item in categories_list:
                markup.append(
                    [InlineKeyboardButton(f'  üõ†  {item}', callback_data=f'CANDIDATE_FOR_CATEGORY_NAME:{item}', )]
                    )

        markup.append([InlineKeyboardButton(" ‚ùå  CANCEL", callback_data=f'CATEGORY_SELECTION_FOR_ENTRY:CANCEL')])
        return markup


    @log_errors
    def edit_category2(self, update: Update, context: CallbackContext):
        """
        –º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ callback query
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message

        user_id = update.callback_query.from_user.id
        mongo_query = {"user_id": user_id}
        result = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        
        # –¥–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–ª–ª–±–µ–∫–∞ –æ—Ç–¥–∞–≤–∞–µ–º–æ–≥–æ –∫–Ω–æ–ø–∫–æ–π
        category_name = query.data.split(":")[1]
        timerdata_entry_id = context.chat_data["timerdata_entry_id"]
        # –ù–∞–∫–æ–Ω–µ—Ü –∑–∞–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        result.edit_category(timerdata_entry_id, category_name)

        data = result.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)

        '''
        –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Ü–µ–ª—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ select_action
        '''

        # –¥–æ—Å—Ç–∞–µ–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–∞–π–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º projection query
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                "user_id" : user_id, 
                'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } }
            },
            { 'timerdata': { '$elemMatch': {'timerdata_entry_id': { '$eq': timerdata_entry_id } } } }
        )
        # logger.info(result[0]['timerdata'])

        str_line = ''
        for i in (list(item.items()) for item in result[0]['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entry = str_line.rstrip("\n")

        if result:

            button_list = [
                [InlineKeyboardButton(" üìÖ   EDIT TIMESTAMP", callback_data=str('SELECT_ACTION:TIMESTAMP'))],
                [InlineKeyboardButton(" üïî   EDIT TIME ELAPSED", callback_data=str('SELECT_ACTION:TIME'))],
                [InlineKeyboardButton(" üí¨   EDIT COMMENT", callback_data=str('SELECT_ACTION:COMMENT'))],
                [InlineKeyboardButton(" üóÇ   EDIT CATEGORY", callback_data=str('SELECT_ACTION:CATEGORY'))],
                [InlineKeyboardButton(" ‚ùå   EXIT", callback_data=f'SELECT_ACTION:CANCEL')]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'{entry}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )

        return 2


    @log_errors
    def exit(self, update: Update, context: CallbackContext):
        """
        handler for terminating all dialog sequences
        """
        try:
            query = update.callback_query
            if query == None:
                reply_markup = InlineKeyboardMarkup([])
                update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∞–±–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–æ–π.\n–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–∏—â–µ–Ω—ã, –∏ –≤—ã –≤ —ç—Ç–æ–º –≤–∏–Ω–æ–≤–∞—Ç—ã —Å–∞–º–∏.\n–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –Ø–Ω—É–∞—Ä–∏–π!", reply_markup=reply_markup)
            else:
                update.message.reply_text(f"""–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –ê–Ω—Ç–æ–Ω–∏–π.""")
        except:
            sent_message = update.callback_query.message
            self.bot.edit_message_text(
                text=f'–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –°–µ—Ä–∞—Ñ–∏–º –ê—Ä–∑–∞–º–∞—Å-16—ã–π.',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=None,
                parse_mode='Markdown'
            )
            pass
        # now clear all cached data
        # clear assosiated with user data and custom context variables
        context.chat_data.clear()
        context.user_data.clear()
        # equivalent of return ConversationHandler.END
        return -1


    @log_errors
    def register_handler(self, dispatcher):
        """
        —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—à–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        """
        dispatcher.add_handler(CommandHandler('end', self.exit))

        self.edit_entries_dialog = ConversationHandler(
        entry_points=[CommandHandler('edit_entries', self.edit_entries_entrypoint)],
        states={
                1:[
                    CallbackQueryHandler(self.exit, pattern='^{}$'.format(str("ENTRY_SELECTION:CANCEL"))),
                    CallbackQueryHandler(self.select_action, pattern='^{}'.format(str("ENTRY_NAME")))
                ],
                2:[
                    CallbackQueryHandler(self.edit_timestamp, pattern='^{}$'.format(str("SELECT_ACTION:TIMESTAMP"))),
                    CallbackQueryHandler(self.edit_time, pattern='^{}$'.format(str("SELECT_ACTION:TIME"))),
                    CallbackQueryHandler(self.edit_comment, pattern='^{}$'.format(str("SELECT_ACTION:COMMENT"))),
                    CallbackQueryHandler(self.edit_category, pattern='^{}$'.format(str("SELECT_ACTION:CATEGORY"))),
                    CallbackQueryHandler(self.exit, pattern='^{}$'.format(str("SELECT_ACTION:CANCEL")))
                ],
                3:[
                    CallbackQueryHandler(self.edit_category2, pattern='^{}'.format(str("CANDIDATE_FOR_CATEGORY_NAME"))),
                    CallbackQueryHandler(self.exit, pattern='^{}$'.format(str("CATEGORY_SELECTION_FOR_ENTRY:CANCEL"))) 
                ],
                4:[
                    MessageHandler(Filters.text, self.edit_comment2)
                ],
                5:[
                    MessageHandler(Filters.regex('^\d*$'), self.edit_time2)
                ],
                6:[
                    MessageHandler(Filters.regex('^(\d{9}|\d{14})$'), self.edit_timestamp2)
                ]
                
            },
            fallbacks=[
                MessageHandler(Filters.regex('^Done$'), self.exit),
                MessageHandler(Filters.command, self.exit)
            ]
        )

        dispatcher.add_handler(self.edit_entries_dialog, 1)