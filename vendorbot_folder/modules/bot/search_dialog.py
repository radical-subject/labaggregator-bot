import os
import traceback
import logging

from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem.Draw import SimilarityMaps

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, \
    MessageHandler, Filters

from . import run_async
from .helpers import CONV_SEARCH, SEARCH_STATE
from modules.chem.cas_to_smiles import what_reagent

from modules.db.dbschema import get_reagent_contacts, get_contact
from modules.db.users import users_collection
from modules.db.unique_molecules import *

logger = logging.getLogger(__name__)

CANCEL_SEARCH = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫'
cancel_keyboard = [[KeyboardButton(CANCEL_SEARCH)]]


DBSIZE_OPEN_SEARCH = int(os.getenv('DBSIZE_OPEN_SEARCH', 10))


class Search:

    def search(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        chat_id = update.message.chat_id
        logger.info(f"search({chat_id})")

        user_id = update.message.from_user.id
        count = len(users_collection.get_reagents(user_id))

        if count < DBSIZE_OPEN_SEARCH:  #  and not is_admin_chat(chat_id)
            update.message.reply_text(f"–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —à–µ—Ä–∏–Ω–≥, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å "
                                      f"–≤ –±–∞–∑—É –Ω–µ –º–µ–Ω–µ–µ {DBSIZE_OPEN_SEARCH} –≤–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π. /manage")
            return ConversationHandler.END

        reply_markup = ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True)
        update.message.reply_text("üôãüèª‚Äç‚ôÄÔ∏è Enter query (name or CAS):\n\n"
                                  "üñã –ü—Ä–∏—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π CAS-–Ω–æ–º–µ—Ä:",
                                  reply_markup=reply_markup)

        return SEARCH_STATE

    def search_cas(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        text = update.message.text

        logger.info(f"search_cas({chat_id}): {text}")

        try:
            contacts = []

            cas_list, smiles_list = what_reagent(text)

            if cas_list or smiles_list:
                text = "–ò—â–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
                if cas_list:
                    text += f"\nCAS: {', '.join(cas_list)}\n"
                if smiles_list:
                    text += f"\nSMILES: {', '.join(smiles_list)}"
                update.message.reply_text(text)

                for cas in cas_list:
                    contacts.extend(get_reagent_contacts(users_collection.get_users_by_cas(cas), cas))

                for smiles in smiles_list:
                    contacts.extend(get_reagent_contacts(users_collection.get_users_by_smiles(smiles), smiles))

                contacts = list(set(contacts))
                
                if contacts:
                    update.message.reply_text(f"–†–µ–∞–≥–µ–Ω—Ç–æ–º –º–æ–≥—É—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {', '.join(contacts)}")
                else:
                    """
                    –í–ù–ò–ú–ê–ù–ò–ï !!!!
                    –¢–£–¢ –°–¢–†–ê–ù–ù–û–ï –ú–ï–°–¢–û, –¥–µ–±–∞–∂–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –ø–æ–∏—Å–∫ —á—É–¥–∏—Ç
                    """
                    best_match_smiles = unique_molecules_collection.get_most_similar_reagent(smiles)
                    
                    if best_match_smiles != None:
                        # for reagent_id in best_match_smiles[0]:
                        inchi_key = best_match_smiles[0]
                        contacts += [get_contact(i) for i in users_collection.get_user_by_reagent_inchi_key(inchi_key)]
                        update.message.reply_text(f"–ö–∞–∂–µ—Ç—Å—è, —Ä–µ–∞–≥–µ–Ω—Ç–æ–º –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è, –Ω–æ –Ω–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —É {', '.join(contacts)}.\n—Å—Ö–æ–∂–µ—Å—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º: {(best_match_smiles[2]*100):.2f}%\n{best_match_smiles[1:]}\nSimilarity Map Result:")
        
    
                        mol = Chem.MolFromSmiles(best_match_smiles[1])
                        refmol = Chem.MolFromSmiles(smiles)

                        fp = SimilarityMaps.GetAPFingerprint(mol, fpType='normal')
                        fp = SimilarityMaps.GetTTFingerprint(mol, fpType='normal')
                        fp = SimilarityMaps.GetMorganFingerprint(mol, fpType='bv')
                        fig, maxweight = SimilarityMaps.GetSimilarityMapForFingerprint(refmol, mol, SimilarityMaps.GetMorganFingerprint)
                        fig.savefig(f"/vendorbot_container/srs/pic/{inchi_key}.png", bbox_inches = "tight")
                        
                        path = "/vendorbot_container/srs/pic"
                        context.bot.sendPhoto(chat_id=chat_id, photo=open(f'{path}/{inchi_key}.png', 'rb'), timeout=1000)
                        # result = f'Similarity Map Result. \n—Å—Ö–æ–∂–µ—Å—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º: {(best_match_smiles[1]*100):.2f}%'
                        # update.message.reply_text(result)

                    else: 
                        update.message.reply_text(f"–†–µ–∞–≥–µ–Ω—Ç–æ–º –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è")
            else:
                update.message.reply_text("–†–µ–∞–≥–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–æ—à–∏–±–∫–∞ –≤ CAS?)")

        except Exception as err:
            logger.error(traceback.format_exc())
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ—Ö–≤–∞—Å—Ç–∞–π—Ç–µ—Å—å –∞–¥–º–∏–Ω—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–∏ –±–æ—Ç.")

        logger.info(f"search_cas({chat_id}): {text} end")
        return SEARCH_STATE

    def exit(self, update: Update, context: CallbackContext) -> int:

        chat_id = update.message.chat_id
        logger.info(f'search.exit({chat_id})')

        update.message.reply_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                                  reply_markup=ReplyKeyboardRemove())

        return ConversationHandler.END

    def fallback(self, update: Update, context: CallbackContext) -> int:

        logger.error(f'{context}')

        return self.exit(update, context)

    def register_handler(self, dispatcher):

        conv_search = ConversationHandler(
            entry_points=[CommandHandler('search', self.search),],
            states={
                SEARCH_STATE: [
                    MessageHandler(Filters.regex(CANCEL_SEARCH), self.exit),
                    MessageHandler(Filters.text & ~Filters.command, self.search_cas, run_async=run_async())
                ],
            },
            fallbacks=[MessageHandler(Filters.command, self.fallback),
                       MessageHandler(Filters.text, self.fallback)],
        )

        dispatcher.add_handler(conv_search, CONV_SEARCH)
