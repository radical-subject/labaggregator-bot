import os
import traceback
import logging
from time import sleep

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, error
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, \
    MessageHandler, Filters

from . import run_async
from .helpers import CONV_SEARCH, SEARCH_STATE, is_admin_chat
from modules.chem.cas_to_smiles import what_reagent
from modules.chem import helpers
from modules.chem.pictures import create_similar_smiles_grid_picture, create_smiles_picture

from modules.db.dbschema import get_reagent_contacts, get_contact
from modules.db.users import users_collection
from modules.db.unique_molecules import *

logger = logging.getLogger(__name__)

CANCEL_SEARCH = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫'
cancel_keyboard = [[KeyboardButton(CANCEL_SEARCH)]]

DBSIZE_OPEN_SEARCH = int(os.getenv('DBSIZE_OPEN_SEARCH', 10))


def send_photo(context, chat_id, file_path):
    context.bot.sendPhoto(chat_id=chat_id, photo=open(file_path, 'rb'), timeout=1000)


def unique_reagents(same_inchikey: str, same_smiles: str) -> List[Reagent]:
    reagents = users_collection.get_reagents_by_inchi(same_inchikey)
    # for smile_reagent in users_collection.get_reagents_by_smiles(same_smiles):
    #     # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å (TODO –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ reagent_id –∏–ª–∏ inchi_key —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å)
    #     if not [r for r in reagents if r.inchikey_standard != smile_reagent.inchikey_standard]:
    #         reagents.append(smile_reagent)
    return reagents


def find_contacts_and_locations(update: Update, user_id: int, reagents: List[Reagent]) -> None:
    """
    –û—Ç–≤–µ—á–∞–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–µ–∞–≥–µ–Ω—Ç—ã, —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    :param update:
    :param user_id:
    :param reagents:
    :return:
    """
    logger.info([(r.contact, r.cas) for r in reagents])

    response = []
    contacts = []
    locations = []
    for r in reagents:

        if r.user_id == user_id:
            contact = '–≤–∞—Å'
        elif not r.contact:
            contact = get_contact(users_collection.get_user(user_id))
        else:
            contact = r.contact

        if r.user_id == user_id:
            
            if r.location:
                locations.append(r.location)
                
        else:

            # if r.location:
            contacts.append(contact)

    contacts = set(contacts)
    
    return locations, contacts


def answer_user(update: Update, locations: list, contacts: list, message_text):

    if locations:
        locations_text = '\n'.join(locations)
        return update.message.reply_text(f"{message_text}\n"
                                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –µ–≥–æ —Ç—É—Ç:\n{locations_text}")
    elif contacts:
        contacts_text = '\n'.join(contacts)
        return update.message.reply_text(f"{contacts_text}\n"
                                         f"–≠—Ç–æ—Ç —Ä–µ–∞–≥–µ–Ω—Ç –µ—Å—Ç—å —É {message_text}.\n")


class Search:

    def search(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        chat_id = update.message.chat_id
        logger.info(f"search({chat_id})")

        user_id = update.message.from_user.id

        # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–≥–µ–Ω—Ç–∞–º–∏
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
        user = users_collection.get_user(user_id)
        if not user:
            update.message.reply_text("–≠—Ç–æ –ø–æ—á–µ–º—É —Ç–µ–±—è –Ω–µ—Ç –≤ –ë–î?! –¢—ã–∫–Ω–∏ /start")
            return ConversationHandler.END

        count = len(users_collection.get_reagents(user_id))

        if count < DBSIZE_OPEN_SEARCH and not is_admin_chat(chat_id):
            update.message.reply_text(f"–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —à–µ—Ä–∏–Ω–≥, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å "
                                      f"–≤ –±–∞–∑—É –Ω–µ –º–µ–Ω–µ–µ {DBSIZE_OPEN_SEARCH} –≤–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π. /manage")
            return ConversationHandler.END

        reply_markup = ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True)
        update.message.reply_text("üôãüèª‚Äç‚ôÄÔ∏è Enter query (name or CAS):\n\n"
                                  "üñã –ü—Ä–∏—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π **CAS-–Ω–æ–º–µ—Ä** –∏–ª–∏ **–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**:",
                                  reply_markup=reply_markup)
        return SEARCH_STATE

    def search_cas(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        text = update.message.text
        user_id = update.message.from_user.id

        logger.info(f"search_cas({chat_id}): {text}")

        try:
            reagents = []

            # TODO –∫–∞–∂–µ—Ç—Å—è –≤ what_reagent —Å—é–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            cas_list, smiles_list = what_reagent(text)

            if not cas_list and not smiles_list:
                update.message.reply_text(f"–ò—â–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                          f"–Ω–∞–∑–≤–∞–Ω–∏–µ: {text}")

                reagents = users_collection.get_reagents_by_name(text)
                if not reagents:
                    update.message.reply_text("–†–µ–∞–≥–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–æ—à–∏–±–∫–∞ –≤ CAS?)")

            else:
                ret = "–ò—â–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                if cas_list:
                    ret += f"CAS: {', '.join(cas_list)}\n"
                if smiles_list:
                    ret += f"SMILES: {', '.join(smiles_list)}"

                sent_message = update.message.reply_text(ret)

                reagents = users_collection.get_reagents_by_cas(cas_list)

                # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å (TODO –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ reagent_id –∏–ª–∏ cas —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å location –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º!)
                for smile_reagent in users_collection.get_reagents_by_smiles(smiles_list):
                    if smile_reagent not in reagents:  # __eq__ –≤ Reagent
                        reagents.append(smile_reagent)

                if reagents:
                    (locations, contacts) = find_contacts_and_locations(update, user_id, reagents)

                    logger.info("–ó–î–ï–°–¨??")
                    answer_user(update, locations, contacts, "")


                else:
                    # # TODO –ª—É—á—à–µ –ø—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å, —Ç.–∫. –¥–∞–ª—å—à–µ –ø–æ–π–¥–µ–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç—è–º–∏
                    # update.message.reply_text(f"–ò–º–µ–Ω–Ω–æ —ç—Ç–∏–º —Ä–µ–∞–≥–µ–Ω—Ç–æ–º –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.")

                    for smiles in smiles_list:

                        filter_smiles = helpers.filter_smiles_by_neutralize_atoms(smiles)  # TODO –¥–æ–±–∞–≤–∏–ª. –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

                        molecules = unique_molecules_collection.get_similar_molecules(filter_smiles, 5)

                        if not molecules:
                            update.message.reply_text(f"–ü–æ—Ö–æ–∂–∏–µ –Ω–∞ {smiles} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        else:  # —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏
                            # similarity 0-1.0 —Å—Ö–æ–∂–µ—Å—Ç—å –≥–¥–µ 1.0=100%
                            logger.info("—è –∑–¥–µ—Å—å")
                            same_inchikey, same_smiles, similarity = molecules[0]
                            if similarity > 0.99:
                                reagents = unique_reagents(same_inchikey, same_smiles)
                                if reagents:
                                    
                                    non_unique_reagents_list = [str(r) for r in reagents]
                                    unique_reagents_list =[]
                                    for item in non_unique_reagents_list:
                                        if item not in unique_reagents_list:
                                            unique_reagents_list.append(item) 
                                    message_text = f"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∏—â–µ—Ç–µ \n" + ', '.join(unique_reagents_list) + f"(c—Ö–æ–∂–µ—Å—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º {similarity*100}%):"
                                    
                                    (locations, contacts) = find_contacts_and_locations(update, user_id, reagents)

                                    
                                    answer_user(update, locations, contacts, message_text)

                                    path = create_smiles_picture(same_smiles)
                                    send_photo(context, chat_id, path)
                            else:
                                update.message.reply_text(f"–¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç.")
                                total_hit_reagents_count = []
                                for index, molecule in enumerate(molecules):
                                    same_inchikey, same_smiles, similarity = molecule
                                    
                                    reagents = unique_reagents(same_inchikey, same_smiles)
                                    total_hit_reagents_count += reagents
                                    logger.info((same_inchikey, same_smiles))
                                    if reagents:
                                        
                                        pers = f"{similarity*100:.2f}"
                                        
                                        non_unique_reagents_list = [str(r) for r in reagents]
                                        unique_reagents_list =[]
                                        for item in non_unique_reagents_list:
                                            if item not in unique_reagents_list:
                                                unique_reagents_list.append(item) 
                                        message_text = f"–ü–æ—Ö–æ–∂–∏–π –Ω–∞ {pers}% –Ω–∞ –∏—Å–∫–æ–º—ã–π —Ä–µ–∞–≥–µ–Ω—Ç:\n" + ', '.join(unique_reagents_list)
                                        
                                        
                                        (locations, contacts) = find_contacts_and_locations(update, user_id, reagents)
                                        answer_user(update, locations, contacts, message_text)


                                logger.info(total_hit_reagents_count)
                                if total_hit_reagents_count == []:
                                    try: 
                                        sleep(1)
                                        sent_message.edit_text(
                                            text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! too bad, so sad!'
                                        )
                                        sleep(1)
                                    except error.BadRequest:
                                        logger.info("do not be afraid, it is a harmles telegram API bug wrapped in try/except")
                                    
                                    path = create_similar_smiles_grid_picture(smiles, molecules)
                                    send_photo(context, chat_id, path)

        except Exception as err:
            logger.error(traceback.format_exc())
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ—Ö–≤–∞—Å—Ç–∞–π—Ç–µ—Å—å –∞–¥–º–∏–Ω—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–∏ –±–æ—Ç.")

        logger.info(f"search_cas({chat_id}): {text} end")
        return SEARCH_STATE

    def exit(self, update: Update, context: CallbackContext) -> int:

        chat_id = update.message.chat_id
        logger.info(f'search.exit({chat_id})')

        update.message.reply_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                                  reply_markup=ReplyKeyboardRemove())

        return ConversationHandler.END

    def fallback(self, update: Update, context: CallbackContext) -> int:

        logger.error(f'{context}')

        return self.exit(update, context)

    def register_handler(self, dispatcher):

        conv_search = ConversationHandler(
            entry_points=[CommandHandler('search', self.search), ],
            states={
                SEARCH_STATE: [
                    MessageHandler(Filters.regex(CANCEL_SEARCH), self.exit),
                    MessageHandler(Filters.text & ~Filters.command, self.search_cas, run_async=run_async())
                ],
            },
            fallbacks=[MessageHandler(Filters.command, self.fallback),
                       MessageHandler(Filters.text, self.fallback)],
        )

        dispatcher.add_handler(conv_search, CONV_SEARCH)
