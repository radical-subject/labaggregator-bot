
import logging
logger = logging.getLogger(__name__)
from telegram import (ReplyKeyboardMarkup, KeyboardButton, ParseMode)

from telegram import Update
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, MessageHandler, Filters

from modules.db.users import users_collection
from .helpers import bot_commands_text, CONV_START, REQ_CONTACT_STATE


def user_from_user_info(user_info, phone_number: str = ""):
    return {
        "_id": user_info.id,
        "user_id": user_info.id,
        "username": user_info.username,
        "firstname": user_info.first_name,
        "lastname": user_info.last_name,
        "phone_number": phone_number
    }


class Initial:

    """
    –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã. –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–ª–∞—Å—Å Handlers,
    –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —Ñ–ª–∞–≥–∏ –°–û–°–¢–û–Ø–ù–ò–Ø (–¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤?) –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è **db_clients 
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """

    def start(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.
        welcome message and initialization of user by inserting his data into DB
        """
        user_info = update.message.from_user
        chat_id = update.message.chat.id
        logger.info(f'start({chat_id})')

        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É
        text = f"""–ü—Ä–∏–≤–µ—Ç, {user_info.first_name}! üë©üèª‚Äçüíª 
–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–µ–Ω—ã–º –¥–µ–ª–∏—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –æ–±—Ä–∞–∑—Ü–∞–º–∏ —Ö–∏–º—Ä–µ–∞–∫—Ç–∏–≤–æ–≤.
{bot_commands_text(chat_id)}"""

        update.message.reply_text(text, parse_mode=ParseMode.HTML)

        user = users_collection.get_user(user_info.id)
        if not user:
            # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ –≤ –ë–î –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º
            user = user_from_user_info(user_info)
            users_collection.add_user(user)
            logger.info(f"user added")
        else:
            logger.info(f"User ({user_info.id}) exists")

        logger.info(f"userdata({user})")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ - –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞)
        if not user["username"] and ("phone_number" not in user or not user["phone_number"]):
            logger.info(f"no username or no phone ({chat_id})")

            reply_markup = ReplyKeyboardMarkup([[KeyboardButton("Share contact", request_contact=True)]],
                                               resize_keyboard=True, one_time_keyboard=True)

            update.message.reply_text("You haven\'t setup your username. You will not be able to use sharing. "
                                      "Please share your contact to proceed any further:",
                                      reply_markup=reply_markup)
            return REQ_CONTACT_STATE

        return ConversationHandler.END

    def get_contact(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        user_info = update.message.from_user
        logger.info(f"get_contact({chat_id})")

        phone_number = update.message.contact.phone_number
        logger.info(f"get_contact phone={phone_number}")

        user = users_collection.get_user(user_info.id)
        if not user:
            logger.error("user –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ /start. –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!")
            user = user_from_user_info(user_info, phone_number=phone_number)
            users_collection.add_user(user)
        else:
            user["phone_number"] = phone_number
            users_collection.update_user(user_info.id, user)

        update.message.reply_text("Thanks for sharing your contact. "
                                  "Now you will be able to upload your list of reagents. /manage")

        return ConversationHandler.END

    def exit(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        logger.info(f"start.exit({chat_id})")

        return ConversationHandler.END

    def help_command(self, update: Update, context: CallbackContext):
        """Send a message when the command /help is issued."""
        chat_id = update.message.chat_id
        logger.info(f'help({chat_id})')

        update.message.reply_text("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–ª—å—Ñ–∞-–≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–æ–≤. 
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ–±–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º. 
/manage - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞ —Å CAS –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Å—Ç–æ–ª–±–∏–∫. 
/search - –ü–æ–∏—Å–∫ –ø–æ CAS –ø–æ –±–∞–∑–µ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–º–µ–Ω–∞.

–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Ç–∞–∫–∂–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –õ–∞–±–∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ @labaggregator.
        """, parse_mode=ParseMode.HTML)

    def register_handler(self, dispatcher):
        
        dispatcher.add_handler(CommandHandler('help', self.help_command))

        self.conversation_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                REQ_CONTACT_STATE: [
                    MessageHandler(Filters.contact, self.get_contact)
                ],
            },
            fallbacks=[MessageHandler(Filters.all, self.exit)],
        )
        
        dispatcher.add_handler(self.conversation_handler, CONV_START)
