import os
import pymongo
import traceback
import logging

from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler

from modules.db.dbconfig import MONGO_VENDORBOT_DATABASE, root_client, MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD

from modules.db.users import users_collection
from modules.db import dbschema
from modules.db.blacklist import blacklist_engine
from modules.db.mongodb import dump_database

from . import run_async
from .decorators import is_admin

logger = logging.getLogger(__name__)


class Admin:

    @is_admin
    def purge_handler(self, update: Update, context: CallbackContext):

        chat_id = update.message.chat_id
        logger.info(f"purge_handler({chat_id})")

        button_list = [
            [
                InlineKeyboardButton("‚úÖ Yup", callback_data='ADMIN:YUP'),
                InlineKeyboardButton("üôÖüèª‚Äç‚ôÄÔ∏è Nope", callback_data='ADMIN:NOPE')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(button_list)
        update.message.reply_text(
            "üë©üèª‚Äçü¶∞ Do you really want to purge the database?",
            reply_markup=reply_markup
        )

    def button_handler(self, update: Update, context: CallbackContext):

        query = update.callback_query
        query.answer()

        logger.info(f"admin.button_handler(?) query data: {query.data}")

        if query.data == "ADMIN:YUP":
            try:
                self.purge()
                query.edit_message_text(text=f"–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –§—Ä–∞–Ω—Ü–∏—Å–∫!")
            except pymongo.errors.OperationFailure:
                query.edit_message_text(text=f"Client is not authorized on db to drop it.")

        elif query.data == "ADMIN:NOPE":
            query.edit_message_text(text=f"–ë–ª—è—Ç—å –Ω–∞—Ö—É–π —è —Å—é–¥–∞ –ø—Ä–∏—à—ë–ª... –∞, –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ!")

        else:
            pass  # —Å—é–¥–∞ –ø–æ–ø–∞–¥–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö callback, —Ç.–∫. button_handler –æ–±—â–∏–π

    def purge(self):
        """
        vendorbot_db_client is not authorized on db to drop it.
        only root can. so, root_client and root instance is transferred as arguments to dbmodel.
        """
        root_client[MONGO_VENDORBOT_DATABASE].command("dropDatabase")
        logger.info(f"database {MONGO_VENDORBOT_DATABASE} dropped")

    @is_admin
    def blacklist_reload(self, update: Update, context: CallbackContext):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç sdf —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–µ—â–µ—Å—Ç–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö blacklist –ø—Ä–∏ –ø–æ–º–æ—â–∏ rdkit.
        updates blacklist with srs/Narkotiki_test.sdf
        """
        chat_id = update.message.chat_id
        logger.info(f"blacklist_reload({chat_id})")

        update.message.reply_text("Wait reloading...")
        reply = blacklist_engine.reload_rdkit()
        update.message.reply_text(f"{reply} molecules successfully imported. nice!")

        reply = blacklist_engine.reload_pandas()
        logger.info(f"{reply} molecules successfully imported with metadata in separate collection. nice!")

    @is_admin
    def digest(self, update: Update, context: CallbackContext):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 —Ñ–∞–π–ª–∞:
        digest.txt ‚Äì —Å–ø–∏—Å–æ–∫ shared –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ CAS –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        digest_cas.txt - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö shared –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ CAS
        """
        chat_id = update.message.chat_id
        logger.info(f"digest({chat_id})")

        update.message.reply_text(f'–û–∂–∏–¥–∞–π—Ç–µ: —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')

        try:
            users = users_collection.get_all_users()
            logger.info(f"users {len(users)}")

            digest = {}
            for user in users:
                for r in dbschema.get_shared_reagents(user):
                    name = dbschema.reagent_name(r)
                    contact = dbschema.reagent_contact(user, r)
                    if name and name not in digest:
                        digest[name] = []

                    if contact not in digest[name]:   # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 —Ä–µ–∞–∫—Ç–∏–≤–∞, —Ç–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è contact
                        digest[name].append(contact)

            logger.info(f"digest length = {len(digest.keys())}")
            update.message.reply_text(f"–í—Å–µ–≥–æ {len(digest.keys())} CAS")

            if digest:
                cas_list = list(digest.keys())
                cas_list = sorted(cas_list)

                digest_cas_txt = '\n'.join(cas_list)

                f = BytesIO(bytes(digest_cas_txt, "utf-8"))
                f.name = "digest_cas.txt"
                f.seek(0)

                context.bot.send_document(chat_id, f)

                digest_txt = '\n'.join(f'{cas} : {", ".join(digest[cas])}' for cas in cas_list)

                f = BytesIO(bytes(digest_txt, 'utf-8'))
                f.name = "digest.txt"
                f.seek(0)

                context.bot.send_document(chat_id, f)

        except Exception as err:
            logger.error(traceback.format_exc())
            update.message.reply_text(f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞...')

    @is_admin
    def dump(self, update: Update, context: CallbackContext):
        """
        dumps whole db, archives it, and sends user .zip archive with data
        """
        chat_id = update.message.chat.id
        logger.info(f'dump({chat_id})')

        response, path = dump_database(MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD)
        logger.info(f'{path}')
        files = os.listdir("./mongodumps")
        logger.info(f'{files}')
        # this bot cannot send more than 50 mb
        try:
            context.bot.sendDocument(chat_id=chat_id, document=open(f'{path}.zip', 'rb'), timeout=1000)
            result = '–ì–µ–Ω–∞, –ø–æ–º–Ω–∏—à—å —Ç—ã –ø—Ä–æ—Å–∏–ª –º–µ–Ω—è –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Ç–µ–±–µ –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —è –ø–æ—à–µ–ª –∏ –ø—Ä–∏–Ω–µ—Å, –≤–æ—Ç –æ–Ω–æ. –ì–µ–Ω–∞ –Ω–∞.'
            update.message.reply_text(result)
        except Exception as err:
            tb = traceback.format_exc()
            update.message.reply_text("—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—å –∑–∞–∫–∞—á–∫—É –Ω–∞ –≥—É–≥–ª–æ–¥–∏—Å–∫.")
            update.message.reply_text(f"–æ—à–∏–±–∫–∞: {tb}")

    def register_handler(self, dispatcher):
        dispatcher.add_handler(CommandHandler('purge_handler', self.purge_handler))
        dispatcher.add_handler(CommandHandler('dump', self.dump, run_async=run_async()))
        dispatcher.add_handler(CommandHandler('blacklist_reload', self.blacklist_reload, run_async=run_async()))
        dispatcher.add_handler(CommandHandler('digest', self.digest, run_async=run_async()))
        dispatcher.add_handler(CallbackQueryHandler(self.button_handler))
