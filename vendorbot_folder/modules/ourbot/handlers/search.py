
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, \
    RegexHandler, MessageHandler, Filters

from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.service.helpers import is_CAS_number
from modules.ourbot.logger import log

SEARCH_STATE = range(1)
CANCEL = '–û—Ç–º–µ–Ω–∞'
CANCEL_REGEXP = '^–û—Ç–º–µ–Ω–∞$'

cancel_keyboard = [[KeyboardButton(CANCEL)]]


class Search(Handlers):
    def __init__(self, bot, db_instances):
        super(Search, self).__init__(db_instances)
        self.bot = bot

    def search(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        update.message.reply_text("üôãüèª‚Äç‚ôÄÔ∏è Enter query (name or CAS):\n\n"
                                  "üñã –ü—Ä–∏—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π CAS-–Ω–æ–º–µ—Ä:",
                                  reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
        return SEARCH_STATE

    def search_cas(self, update: Update, context: CallbackContext):

        chat_id = update.message.chat_id

        text = update.message.text
        if is_CAS_number(text):
            update.message.reply_text('–õ–∞–±–æ—Ä–∞–Ω—Ç —É–∑—Ä–µ–ª CAS, —É–±–µ–∂–∞–ª –∏—Å–∫–∞—Ç—å...')

            update.message.reply_text('–ß—Ç–æ-—Ç–æ –Ω–∞—à—ë–ª!')

        else:
            update.message.reply_text('–õ–∞–±–æ—Ä–∞–Ω—Ç –Ω–µ —É–º–µ–µ—Ç –Ω–µ CAS, —Å–æ—Ä—è–Ω')

        return SEARCH_STATE

    def cancel(self, update: Update, context: CallbackContext) -> int:
        """
        –í—ã—Ö–æ–¥ –∏–∑ –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        log.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
        update.message.reply_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
                                  reply_markup=ReplyKeyboardRemove())

        return ConversationHandler.END

    def register_handler(self, dispatcher):

        self.conversation_handler = ConversationHandler(
            entry_points=[CommandHandler('search', self.search),],
            states={
                SEARCH_STATE: [MessageHandler(Filters.regex(CANCEL_REGEXP), self.cancel),
                               MessageHandler(Filters.text & ~Filters.command, self.search_cas,
                                              run_async=True)
                               ],
            },
            fallbacks=[RegexHandler(CANCEL_REGEXP, self.cancel)],
        )

        dispatcher.add_handler(self.conversation_handler, 1)
