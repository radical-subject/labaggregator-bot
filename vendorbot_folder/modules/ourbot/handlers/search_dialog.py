
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, \
    InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, \
    RegexHandler, MessageHandler, CallbackQueryHandler, Filters

from modules.ourbot.handlers.helpers import CONV_SEARCH
from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.service.helpers import is_CAS_number
from modules.ourbot.logger import logger

from modules.db import dbschema
from modules.db.dbmodel import users_collection


SEARCH_STATE = range(1)
CANCEL_CALLBACK = str('SEARCH:CANCEL')

cancel_keyboard = [
    [
        InlineKeyboardButton("CANCEL SEARCH", callback_data=CANCEL_CALLBACK)
    ]
]


class Search(Handlers):
    def __init__(self, bot, db_instances):
        super(Search, self).__init__(db_instances)
        self.collection = "users_collection"

    def search(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        chat_id = update.message.chat_id
        logger.info(f'search({chat_id})')
        reply_markup = InlineKeyboardMarkup(cancel_keyboard)
        update.message.reply_text("üôãüèª‚Äç‚ôÄÔ∏è Enter query (name or CAS):\n\n"
                                  "üñã –ü—Ä–∏—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π CAS-–Ω–æ–º–µ—Ä:",
                                  reply_markup=reply_markup)
        return SEARCH_STATE

    def search_cas(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        logger.info(f'search_cas({chat_id})')

        text = update.message.text
        if is_CAS_number(text):
            update.message.reply_text('–ò—â–µ–º CAS –≤ –±–∞–∑–µ —à–µ—Ä–∏–Ω–≥–∞...')

            users = users_collection.get_users_by_cas(text)

            contacts = []
            for user in users:
                user_reagents_object = dbschema.UserReagents(**user)

                for contact in user_reagents_object.get_contacts_for_CAS(text):
                    if contact not in contacts:
                        contacts.append(contact)

            if contacts:
                update.message.reply_text(f'–†–µ–∞–≥–µ–Ω—Ç–æ–º –º–æ–≥—É—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {", ".join(contacts)}')
            else:
                update.message.reply_text('–†–µ–∞–≥–µ–Ω—Ç–æ–º –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.')

        else:
            update.message.reply_text('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CAS –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

        return SEARCH_STATE

    def exit(self, update: Update, context: CallbackContext) -> int:
        """
        –í—ã—Ö–æ–¥ –∏–∑ –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ "–ø–æ–∏—Å–∫"
        """
        chat_id = update.message.chat_id
        logger.info(f'search.exit({chat_id})')

        # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–Ω—É–∞–ª—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ query
        query = update.callback_query
        query.answer()

        # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        sent_message = update.callback_query.message

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É. –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.
        context.bot.edit_message_text(
            text=f'STOPPED',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=None,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # now clear all cached data
        # clear assosiated with user data and custom context variables
        context.chat_data.clear()
        context.user_data.clear()

        return ConversationHandler.END

    def register_handler(self, dispatcher):

        conv_search = ConversationHandler(
            entry_points=[CommandHandler('search', self.search),],
            states={
                SEARCH_STATE: [
                    CallbackQueryHandler(self.exit, pattern=CANCEL_CALLBACK),
                    MessageHandler(Filters.text & ~Filters.command, self.search_cas, run_async=True)
                ],
            },
            fallbacks=[MessageHandler(Filters.command, self.exit),
                       MessageHandler(Filters.text, self.exit)],
        )

        dispatcher.add_handler(conv_search, CONV_SEARCH)
