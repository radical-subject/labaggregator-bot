import logging

from telegram import (ReplyKeyboardMarkup, KeyboardButton, ParseMode)

from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler

import sys
import pandas as pd
sys.path.append("..")
from modules.db.dbschema import UserReagents
        

from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.handlers.decorators import log_errors
from modules.ourbot.handlers.helpers import is_admin_chat
from modules.db import dbmodel, dbschema

import json
from bson import ObjectId

logger = logging.getLogger(__name__)


# API test for Ketcher
from fastapi import FastAPI
app = FastAPI()
@app.get("/")
async def root():
    return {"message": "Hello World"}



class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)


class Inital(Handlers):

    """
    –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã. –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–ª–∞—Å—Å Handlers,
    –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —Ñ–ª–∞–≥–∏ –°–û–°–¢–û–Ø–ù–ò–Ø (–¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤?) –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è **db_clients 
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, bot, db_instances):
        super().__init__(db_instances)
        self.bot=bot
        self.collection = "users_collection"
        self.collection_2 = "timer_data_collection"

    @log_errors
    def start(self, update: Update, context: CallbackContext):
        """
        welcome message and initialization of user by inserting his data into DB
        """

            
        user_info = update.message.from_user
        chat_id = update.message.chat.id

        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É
        text = f"""–ü—Ä–∏–≤–µ—Ç, {user_info.first_name}! üë©üèª‚Äçüíª 
–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, –º—Ö–µ—Ö–µ.
–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/manage - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
/search - –ø–æ–∏—Å–∫ 
"""
        if is_admin_chat(chat_id):
            text += """\n== –ê–¥–º–∏–Ω–∞–º ==
/digest - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ shared
/purge_handler - –æ—á–∏—Å—Ç–∫–∞ –±–¥ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
/dump - –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤ –ª—Å –∑–∏–ø-–¥–∞–º–ø)
/blacklist_update - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –±–ª–µ–∫–ª–∏—Å—Ç–∞ –∏ –æ–±—Å—á–µ—Ç. –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
"""
        update.message.reply_text(text, parse_mode=ParseMode.HTML)

        # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ –≤ –ë–î
        userdata_dict = {
            "_id": user_info.id,
            "user_id": user_info.id,
            "username": "@{}".format(user_info.username),
            "firstname": user_info.first_name,
            "lastname": user_info.last_name
        }

        try:

            # logger.info(f"{self.vendorbot_db_client}, {self.db_instances['vendorbot_db']}, {self.collection}, {userdata_dict}")
            dbmodel.add_records(self.vendorbot_db_client, self.db_instances["vendorbot_db"], self.collection, userdata_dict)
            raise Exception("TEST FUCKING TEST")

        except Exception as e:
            print(f"{e}, HELLO MR MUSLIM MERRY FUCKING CHRISTMAS")
            logger.info(e)
            logger.info("User already exists: skipping insertion of userdata in DB")
        
        # associated with user chat and context stored data should be cleaned up to prevent mess
        context.chat_data.clear()
        context.user_data.clear()

        return self.INITIAL

    def exit_command(self, update: Update, context: CallbackContext):
        """
        hadler for terminating all dialog sequences
        """
        try:
            query = update.callback_query
            if query != None:
                reply_markup = InlineKeyboardMarkup([])
                query.edit_message_text(
                    text="You cancelled db removal. –î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –Ø–Ω—É–∞—Ä–∏–π!",
                    reply_markup=reply_markup
                )
            else:
                update.message.reply_text(f"""–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –ê–Ω—Ç–æ–Ω–∏–π.""")
        except:
            update.message.reply_text(f"""–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –ê–Ω—Ç–æ–Ω–∏–π.""")
            pass
        # now clear all cached data
        # clear assosiated with user data and custom context variables
        context.chat_data.clear()
        context.user_data.clear()
        return ConversationHandler.END

    def my_lab(self, update: Update, context: CallbackContext):
        current_lab = context.user_data.get('current_lab')
        result = 'None' if current_lab is None else JSONEncoder().encode(current_lab)
        update.message.reply_text(result, parse_mode='HTML')

    def help_command(self, update: Update, context: CallbackContext):
        """Send a message when the command /help is issued."""
        update.message.reply_text("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–ª—å—Ñ–∞-–≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–æ–≤. 
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ–±–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º. 
/manage - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞ —Å CAS –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Å—Ç–æ–ª–±–∏–∫. 
/search - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ –±–∞–∑–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤.

–ø–æ–∫–∞ /search –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –ª–∞–±–∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞.
        """, parse_mode=ParseMode.HTML)

        return self.INITIAL

    @log_errors
    def today_stats(self, update: Update, context: CallbackContext):
        """Send information about work entries for today"""
        user_info = update.message.from_user
        user_id = user_info.id
        # –∏—â–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        mongo_query = {"user_id": user_id}
        previous_records=dbmodel.get_records(self.vendorbot_db_client, self.db_instances["vendorbot_db"], self.collection_2, mongo_query)
        # logger.info(previous_records[0])
        timer_object = dbschema.TimerData(
            **previous_records[0]
        )
        # logger.info(timer_object.export())

        try:
            data = timer_object.export()
        except:
            data = "No records"
        try:
            time_netto_today = timer_object.get_netto_today()
            logger.info(f"time netto today = {timer_object.get_netto_today()} minutes")
        except:
            time_netto_today = 0

        # –ø–µ—Ä–µ—Å—á–µ—Ç –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        time_netto_today_hours = time_netto_today // 60
        time_netto_today_minutes = time_netto_today % 60
        logger.info(data)

        str_line = ''
        for i in (list(item.items()) for item in data['timerdata']):
            str_line += "\n".join([': '.join(map(str, tuple_item)) for tuple_item in i])
            str_line += "\n\n" 
        entries = str_line.rstrip("\n")

        update.message.reply_text(f"===================\n{entries}\n===================\n\nTime brutto today == 10 hours.\nthis is temporarily hardcoded.\n\ntime_netto_today = {time_netto_today_hours:.0f} h. {time_netto_today_minutes:.2f} min.")
        
        return self.INITIAL

    @log_errors
    # @run_async
    def resolve_tests(self, update: Update, context: CallbackContext):

        input_txt_file_path = "./srs/user_reagent_lists_import/Chusov_1.txt"
        import_CAS_df = pd.read_csv(input_txt_file_path, header = None)
        CAS_list = import_CAS_df[0].tolist()

        # retrieving data from user message
        # –∏—â–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = update.message.from_user.id
        mongo_query = {"user_id": user_id}
        logger.info(f"mongo_query: {mongo_query}")
        user_info = update.message.from_user
        chat_id = update.message.chat.id

        initial_record = dbmodel.get_records(self.vendorbot_db_client, self.db_instances["vendorbot_db"], self.collection, mongo_query)
        logger.info(f"initial_record: {initial_record}")
        user_reagents_object = UserReagents(**initial_record[0])
        
        # –∏–º–ø–æ—Ä—Ç –ª–∏—Å—Ç–∞ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è–º–∏
        user_reagents_object.add_list_of_reagents(user_info.id, user_info.username, self.blacklist_rdkit_db_client, self.db_instances["blacklist_rdkit_db"], CAS_list)
        # —ç–∫—Å–ø–æ—Ä—Ç JSON - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å pymongo! –Ω—É–∂–µ–Ω dict
        data = user_reagents_object.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –æ–±—ä–µ–∫—Ç 
        dbmodel.update_record(self.vendorbot_db_client, self.db_instances["vendorbot_db"], self.collection, mongo_query, data)
        update.message.reply_text(f"{user_reagents_object.get_user_shared_reagents()[0]}")

    @log_errors
    def capture_contact(self, update: Update, context: CallbackContext):
        # retrieving data from user message
        user_info = update.message.from_user
        chat_id = update.message.chat.id

        reply_markup = ReplyKeyboardMarkup([[KeyboardButton('Share contact', request_contact=True)]])
        self.bot.sendMessage(chat_id, 'Example', reply_markup=reply_markup)

    @log_errors
    def set_tag(self, update: Update, context: CallbackContext):
        """set tag for timerdata"""
        pass

    @log_errors
    def register_handler(self, dispatcher):
        dispatcher.add_handler(CommandHandler('start', self.start))
        dispatcher.add_handler(CommandHandler('my_lab', self.my_lab))
        dispatcher.add_handler(CommandHandler('end', self.exit_command))
        dispatcher.add_handler(CommandHandler('help', self.help_command))
        dispatcher.add_handler(CommandHandler('today', self.today_stats))
        dispatcher.add_handler(CommandHandler('resolve_tests', self.resolve_tests))
        dispatcher.add_handler(CommandHandler('capture_contact', self.capture_contact))
