
import json
from bson import ObjectId
import pandas as pd

from modules.ourbot.logger import logger
from telegram import (ReplyKeyboardMarkup, KeyboardButton, ParseMode)

from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, ConversationHandler, MessageHandler, Filters

from modules.db.dbschema import UserReagents
        
from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.handlers.helpers import is_admin_chat, bot_commands_text
from modules.db.dbmodel import users_collection


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)

REQUESTED_CONTACT_STATE = "INITIAL:GET_CONTACT"

class Inital(Handlers):

    """
    –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã. –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–ª–∞—Å—Å Handlers,
    –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —Ñ–ª–∞–≥–∏ –°–û–°–¢–û–Ø–ù–ò–Ø (–¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤?) –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è **db_clients 
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, bot, db_instances):
        super().__init__(db_instances)
        self.bot = bot

    def start(self, update: Update, context: CallbackContext):
        """
        –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.
        welcome message and initialization of user by inserting his data into DB
        """
        user_info = update.message.from_user
        chat_id = update.message.chat.id

        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É
        text = f"""–ü—Ä–∏–≤–µ—Ç, {user_info.first_name}! üë©üèª‚Äçüíª 
–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, –º—Ö–µ—Ö–µ.
{bot_commands_text(chat_id)}"""

        update.message.reply_text(text, parse_mode=ParseMode.HTML)

        #TODO –ê –¥–∞–≤–∞–π –ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ user_info.username, —Ç–æ –∏ –ø–æ–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è?
        # –∏–Ω–∞—á–µ –º—ã —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–º–µ—Ä—É –¥–∏–∞–ª–æ–≥–∞ –±—É–¥–µ–º –∑–Ω–∞—Ç—å —á–µ–π —Ä–µ–∞–∫—Ç–∏–≤, –ª–∏–±–æ –ø–æ –Ω–æ–º–µ—Ä—É –º–æ–±–∏–ª–∫–∏

        if user_info.username == None:
        
            reply_markup = ReplyKeyboardMarkup([[KeyboardButton('Share contact', request_contact=True)]])
            self.bot.sendMessage(chat_id, 'You havent set up your username. You will not be able to use sharing. Please share your contact to proceed:', reply_markup=reply_markup)

            return REQUESTED_CONTACT_STATE

        # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ –≤ –ë–î
        userdata = {
            "_id": user_info.id,
            "user_id": user_info.id,
            "username": "@{}".format(user_info.username),
            "firstname": user_info.first_name,
            "lastname": user_info.last_name
        }

        if not users_collection.get_user(user_info.id):
            users_collection.add_user(userdata)
        else:
            logger.info("User already exists: skipping insertion of userdata in DB")

        # associated with user chat and context stored data should be cleaned up to prevent mess
        context.chat_data.clear()
        context.user_data.clear()

        return -1

    def get_contact(self, update: Update, context: CallbackContext):
        chat_id = update.message.chat_id
        phone_number = update.message.contact.phone_number
        logger.info(phone_number)
        
        reply_markup = ReplyKeyboardMarkup([])
        self.bot.sendMessage(chat_id, 'Thanks.', reply_markup=reply_markup)
        
        return -1

    def help_command(self, update: Update, context: CallbackContext):
        """Send a message when the command /help is issued."""
        update.message.reply_text("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–ª—å—Ñ–∞-–≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–æ–≤. 
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ–±–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º. 
/manage - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞ —Å CAS –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Å—Ç–æ–ª–±–∏–∫. 
/search - –ü–æ–∏—Å–∫ –ø–æ CAS –ø–æ –±–∞–∑–µ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–º–µ–Ω–∞.

–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Ç–∞–∫–∂–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –õ–∞–±–∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ @labaggregator.
        """, parse_mode=ParseMode.HTML)

    def register_handler(self, dispatcher):
        
        dispatcher.add_handler(CommandHandler('help', self.help_command))

        self.conversation_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start),],
            states={
                REQUESTED_CONTACT_STATE: [
                    MessageHandler(Filters.contact, self.get_contact)
                ],
            },
            fallbacks=[MessageHandler(Filters.regex("CANCEL_REGEXP"), self.help_command)],
        )
        
        dispatcher.add_handler(self.conversation_handler, 1)