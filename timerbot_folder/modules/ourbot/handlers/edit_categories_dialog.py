import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler, CallbackQueryHandler)

from modules.ourbot.handlers.handlers import Handlers
from modules.ourbot.service.decorators import log_errors
from modules.db import dbmodel, dbschema
from decimal import *

from modules.db.dbmodel import get_timerdata_object

logger = logging.getLogger(__name__)


class EditCategoriesDialog(Handlers):
    def __init__(self, bot, db_instances):
        super().__init__(db_instances)
        self.bot=bot
        self.collection = "timer_data_collection"
    
    @log_errors
    def edit_categories_entrypoint(self, update: Update, context: CallbackContext):
        '''
        launches dialog for editing categories:
        delete, archive, unarchive
        '''
        user_id = update.message.from_user.id
        result = dbmodel.get_records(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, {"user_id": user_id})
        
        '''
        —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ - —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        '''
        try:
            categories_list = result[0]['categories']
        except:
            categories_list = None

        try:
            categories_list += result[0]['archived_categories']
        except:
            pass

        '''
        —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –∏–∑ –Ω–∏—Ö –º–µ–Ω—é—à–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        '''
        menu = self.build_categories_menu(categories_list)

        msg_text = '{:^50}'.format('<b>üõ†   EDIT CATEGORIES:</b>')
        msg_text += '\n'
        msg_text += '{:=^50}'.format('=')
        msg_text += '\n'
        msg_text += '<i>Select entry from below:</i>'
        reply_markup = InlineKeyboardMarkup(menu)

        '''
        –ø–æ—Å—ã–ª–∞–µ–º –º–µ–Ω—é—à–∫—É
        '''
        update.message.reply_text(text=msg_text, reply_markup=reply_markup, parse_mode='HTML')

        return 1

    @log_errors
    def build_categories_menu(self, categories_list: list):
        """
        –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ–Ω—é—à–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        markup = []
        if categories_list:
            for item in categories_list:
                markup.append(
                    [InlineKeyboardButton(f'  üõ†  {item}', callback_data=f'CATEGORY_NAME:{item}', )]
                    )

        markup.append([InlineKeyboardButton(" ‚ùå  Cancel and exit", callback_data=f'CATEGORY_SELECTION:CANCEL')])
        return markup


    @log_errors
    def select_action(self, update: Update, context: CallbackContext):
        """
        –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞ –≤—ã–±–æ—Ä. 
        """
        current_state = context.user_data.get('state')
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat_id

        context.chat_data["user_id"] = user_id
        context.chat_data["chat_id"] = chat_id

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        
        # –¥–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–ª–ª–±–µ–∫–∞ –æ—Ç–¥–∞–≤–∞–µ–º–æ–≥–æ –∫–Ω–æ–ø–∫–æ–π
        category_name = query.data.split(":")[1]
        context.chat_data["category_name_manipulated"] = category_name

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ—Ç? 
        result = dbmodel.get_records(
            self.timerbot_db_client,
            self.db_instances["timerbot_db"], 
            self.collection, 
            { 
                'user_id' : user_id, 
                'categories': { '$in': [f"{category_name}"] }
            }
        )

        """
        –Ω–∏–∂–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–æ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π
        """
        # result = dbmodel.get_records(
        #     self.timerbot_db_client,
        #     self.db_instances["timerbot_db"], 
        #     self.collection, 
        #     { 
        #         "user_id" : user_id, 
        #         'timerdata': { '$elemMatch': {'category_name': { '$eq': category_name }, 'archived_status': { '$eq': "False" } } }
        #     }
        # )

        logger.info(result)

        """
        –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ object.categories, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ archived_categories. 
        –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏–±–æ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å.
        """
        # logger.info(bool(result)) -- bool([]) == False !!
        # –µ—Å–ª–∏ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - result –Ω–µ –±—É–¥–µ—Ç None:
        if result:

            button_list = [
                [
                    InlineKeyboardButton("–ê–†–•–ò–í–ò–†–û–í–ê–¢–¨", callback_data=str('CATEGORY_ACTION:ARCHIVE')),
                    InlineKeyboardButton("–£–î–ê–õ–ò–¢–¨", callback_data=str('CATEGORY_ACTION:DELETE_CONFIRM'))
                ]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )
        
        else:
            button_list = [
                [
                    InlineKeyboardButton("–†–ê–ó–ê–†–•–ò–í–ò–†–û–í–ê–¢–¨", callback_data=str('CATEGORY_ACTION:UNARCHIVE')),
                    InlineKeyboardButton("–£–î–ê–õ–ò–¢–¨", callback_data=str('CATEGORY_ACTION:DELETE_CONFIRM'))
                ]
            ]
            reply_markup = InlineKeyboardMarkup(button_list)

            self.bot.edit_message_text(
                text=f'–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=reply_markup
            )


        return 2

    @log_errors
    def archive_category(self, update: Update, context: CallbackContext):
        """
        –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π -
        - –ø–æ —Å—É—Ç–∏ –º–µ–Ω—è–µ–º –≤ –Ω–∏—Ö archived_status —Å False –Ω–∞ True
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        category_name = context.chat_data["category_name_manipulated"]
        # –∏—â–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = update.callback_query.from_user.id
        mongo_query = {"user_id": user_id}
        chat_id = update.callback_query.message.chat_id

        timerdata_object = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        timerdata_object.mutate_archive_status(category_name)
        
        timerdata_object.categories.remove(f"{category_name}")
        try:
            timerdata_object.archived_categories.append(f"{category_name}")
        except:
            timerdata_object.archived_categories = [f"{category_name}"]

        data = timerdata_object.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)


        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        # —É–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup([])

        self.bot.edit_message_text(
            text=f'–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return -1



    @log_errors
    def unarchive_category(self, update: Update, context: CallbackContext):
        """
        –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π -
        - –ø–æ —Å—É—Ç–∏ –º–µ–Ω—è–µ–º –≤ –Ω–∏—Ö archived_status —Å False –Ω–∞ True
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        category_name = context.chat_data["category_name_manipulated"]
        # –∏—â–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = update.callback_query.from_user.id
        mongo_query = {"user_id": user_id}
        chat_id = update.callback_query.message.chat_id

        timerdata_object = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        timerdata_object.mutate_archive_status(category_name)
        
        timerdata_object.archived_categories.remove(f"{category_name}")
        try:
            timerdata_object.categories.append(f"{category_name}")
        except:
            timerdata_object.categories = [f"{category_name}"]

        data = timerdata_object.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)


        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        # —É–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup([])

        self.bot.edit_message_text(
            text=f'–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return -1

    def delete_category_confirmation(self, update: Update, context: CallbackContext):
        button_list = [
            [
                InlineKeyboardButton("‚úÖ Yup", callback_data='CATEGORY_ACTION:DELETE'),
                InlineKeyboardButton("üôÖüèª‚Äç‚ôÄÔ∏è Nope", callback_data='CATEGORY_ACTION:ABORT_DELETE')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(button_list)
        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message

        self.bot.edit_message_text(
            text="üë©üèª‚Äçü¶∞ Do you really want to delete this category?\n(and all its related timer data)?",
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return 3


    @log_errors
    def delete_category(self, update: Update, context: CallbackContext):
        """
        –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π -
        - –ø–æ —Å—É—Ç–∏ –º–µ–Ω—è–µ–º –≤ –Ω–∏—Ö archived_status —Å False –Ω–∞ True
        """
        query = update.callback_query
        # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ query
        query.answer()

        category_name = context.chat_data["category_name_manipulated"]
        # –∏—â–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = update.callback_query.from_user.id
        mongo_query = {"user_id": user_id}
        chat_id = update.callback_query.message.chat_id

        timerdata_object = get_timerdata_object(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, user_id)
        timerdata_object.delete_category(category_name)

        data = timerdata_object.export()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        dbmodel.update_record(self.timerbot_db_client, self.db_instances["timerbot_db"], self.collection, mongo_query, data)

        # –¥–æ—Å—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è        
        sent_message = update.callback_query.message
        # —É–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup([])

        self.bot.edit_message_text(
            text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ –Ω–∞—Å–æ–≤—Å–µ–º, –≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞ –æ –Ω–µ–π.',
            chat_id=sent_message.chat_id,
            message_id=sent_message.message_id,
            reply_markup=reply_markup
        )

        return -1



    @log_errors
    def exit(self, update: Update, context: CallbackContext):
        """
        handler for terminating all dialog sequences
        """
        try:
            query = update.callback_query
            if query == None:
                reply_markup = InlineKeyboardMarkup([])
                update.message.reply_text("–¢–∞–π–º–µ—Ä –∞–±–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–æ–π.\n–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–∏—â–µ–Ω—ã, –∏ –≤—ã –≤ —ç—Ç–æ–º –≤–∏–Ω–æ–≤–∞—Ç—ã —Å–∞–º–∏.\n–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Ç–∞–π–º–µ—Ä–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –Ø–Ω—É–∞—Ä–∏–π!", reply_markup=reply_markup)
            else:
                update.message.reply_text(f"""–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –ê–Ω—Ç–æ–Ω–∏–π.""")
        except:
            sent_message = update.callback_query.message
            self.bot.edit_message_text(
                text=f'–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n–î–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤—è—Ç–æ–π –°–µ—Ä–∞—Ñ–∏–º –ê—Ä–∑–∞–º–∞—Å-16—ã–π.',
                chat_id=sent_message.chat_id,
                message_id=sent_message.message_id,
                reply_markup=None,
                parse_mode='Markdown'
            )
            pass
        # now clear all cached data
        # clear assosiated with user data and custom context variables
        context.chat_data.clear()
        context.user_data.clear()
        # equivalent of return ConversationHandler.END
        return -1


    @log_errors
    def register_handler(self, dispatcher):
        """
        —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—à–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        """
        dispatcher.add_handler(CommandHandler('end', self.exit))

        self.edit_categories_dialog = ConversationHandler(
        entry_points=[CommandHandler('edit_categories', self.edit_categories_entrypoint)],
        states={
                1:[
                    CallbackQueryHandler(self.exit, pattern='^{}$'.format(str("CATEGORY_SELECTION:CANCEL"))),
                    CallbackQueryHandler(self.select_action, pattern='^{}'.format(str("CATEGORY_NAME")))
                ],
                2:[
                    CallbackQueryHandler(self.archive_category, pattern='^{}$'.format(str("CATEGORY_ACTION:ARCHIVE"))),
                    CallbackQueryHandler(self.unarchive_category, pattern='^{}$'.format(str("CATEGORY_ACTION:UNARCHIVE"))),
                    CallbackQueryHandler(self.delete_category_confirmation, pattern='^{}$'.format(str("CATEGORY_ACTION:DELETE_CONFIRM")))                                     
                ],
                3:[
                    CallbackQueryHandler(self.delete_category, pattern='^{}$'.format(str("CATEGORY_ACTION:DELETE"))),
                    CallbackQueryHandler(self.exit, pattern='^{}$'.format(str("CATEGORY_ACTION:ABORT_DELETE"))) 
                ]
            },
            fallbacks=[
                MessageHandler(Filters.regex('^Done$'), self.exit),
                MessageHandler(Filters.command, self.exit)
            ]
        )

        dispatcher.add_handler(self.edit_categories_dialog, 1)